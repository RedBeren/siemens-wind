library(chron)
dat <- read.csv('C:/Users/zackt/Documents/GitHub/siemens-wind/Data/Data/All Sites Together encoded.csv')
date.clean <- function(d) {
d <- as.character(d)
d <- sapply(d, function(x) paste(x, ":00", sep = ''))
dtparts <- t(as.data.frame(strsplit(d, ' ')))
row.names(dtparts) <- NULL
d <- chron(dates. = dtparts[,1], times. = dtparts[,2], format = c('m/d/y','h:m:s'))
return(d)
}
dat$VisitStartTime <- date.clean(dat$VisitStartTime)
dat$TimeOn <- date.clean(dat$TimeOn)
dat$TimeOff <- date.clean(dat$TimeOff)
codes <- read.csv('Codes and Event Warning Stop classification.csv')
codes <- read.csv('C:/Users/zackt/Documents/GitHub/siemens-wind/Data/Data/Codes and Event Warning Stop classification.csv')
names(dat)[1]
names(dat)[1] <- 'Park_Name'
names(codes)[1] <- 'Code'
codes$Code <- as.character(codes$Code)
table(codes$EventWarningStop)
library(dplyr)
table(codes$StopUrgency)
names(codes)[3] <- 'IsManualStop'
codes %>% filter(EventWarningStop == 'Stop') %>%
filter(IsManualStop == FALSE) %>%
filter(StopUrgency == '6') -> abrupt_stop_codes
abrupt_stop_codes
codes %>% filter(EventWarningStop == 'Stop') -> stop_codes
stop_codes
table(stop_codes$StopUrgency)
stop_urgency_tbl <- table(stop_codes$StopUrgency)
hist(stop_codes$StopUrgency)
hist(as.numeric(stop_codes$StopUrgency))
hist(as.numeric(stop_codes$StopUrgency), binwidth = 1)
hist(as.numeric(stop_codes$StopUrgency), breaks = 6)
hist(as.numeric(stop_codes$StopUrgency), breaks = 5)
barplot(stop_urgency_tbl)
library(arules)
?version
R.version
table(dat$FactorA)
a <- as.factor(dat$FactorA)
a
levels(a)
dat$FactorA <- as.factor(dat$FactorA)
dat$StationID <- as.character(dat$StationID)
dat$VisitId <- as.character(dat$VisitId)
dat$Code <- as.character(dat$Code)
nrow(dat)
nrow(complete.cases(dat))
table(dat$Park_Name)
table(dat$FactorA)
table(dat$FactorB)
table(dat$FactorC)
table(dat$FactorD)
table(dat$StationID)
?complete.cases
install.packages("RCurl")
library(RCurl)
library(chron)
dat.url <- getURL('https://raw.githubusercontent.com/RedBeren/siemens-wind/master/Data/Data/All%20Sites%20Together%20encoded.csv')
dat <- read.csv(text = dat.url)
library(RCurl)
library(chron)
dat.url <- getURL('https://raw.githubusercontent.com/RedBeren/siemens-wind/master/Data/Data/All%20Sites%20Together%20encoded.csv')
dat <- read.csv(text = dat.url)
# Clean up dates
date.clean <- function(d) {
d <- as.character(d)
d <- sapply(d, function(x) paste(x, ":00", sep = ''))
dtparts <- t(as.data.frame(strsplit(d, ' ')))
row.names(dtparts) <- NULL
d <- chron(dates. = dtparts[,1], times. = dtparts[,2], format = c('m/d/y','h:m:s'))
return(d)
}
dat$VisitStartTime <- date.clean(dat$VisitStartTime)
dat$TimeOn <- date.clean(dat$TimeOn)
dat$TimeOff <- date.clean(dat$TimeOff)
# Park_Name is a little messed up
names(dat)[1] <- 'Park_Name'
# Discretize FactorA so it can be used in association analysis
dat$FactorA <- as.factor(dat$FactorA)
# StationID, VisitID, Code should be strings
dat$StationID <- as.character(dat$StationID)
dat$VisitId <- as.character(dat$VisitId)
dat$Code <- as.character(dat$Code)
install.packages("clickstream")
View(dat)
codes_by_visit <- select(dat, one_of(c("VisitId","Code")))
require(dplyr)
codes_by_visit <- select(dat, one_of(c("VisitId","Code")))
codes_by_visit <- spread(codes_by_visit, VisitId, Code)
require(tidyr)
codes_by_visit <- spread(codes_by_visit, VisitId, Code)
dat %>% spread(VisitId, Code) -> codes_by_visit
dat %>% select(one_of(c("VisitId","Code"))) %>% arrange(VisitId) -> codes_by_visit
View(codes_by_visit)
codes_by_visit %>% spread(VisitId, Code) -> codes_by_visit
require(reshape2)
dcast(melt(dat, id = "VisitId"), VisitId ~ Code)
dcast(melt(dat), VisitId ~ Code)
dfmelt <- melt(codes_by_visit, id = "VisitId")
dfcast <- dcast(dfmelt, VisitId ~ variable + value)
View(dfcast)
View(dfcast)
dat %>% select(one_of(c("VisitId","Code"))) -> codes_by_visit
View(codes_by_visit)
trans <- as(codes_by_visit, "transactions")
library(arules)
trans <- as(codes_by_visit, "transactions")
rm(dfmelt)
rm(dfcast)
codes_by_visit$VisitId <- factor(codes_by_visit$VisitId)
codes_by_visit$Code <- factor(codes_by_visit$Code)
trans <- as(codes_by_visit, "transactions")
rules <- apriori(trans)
inspect(head(rules))
inspect(rules)
inspect(rules[1:5])
?apriori
rules <- apriori(codes_by_visit)
inspect(rules)
View(codes_by_visit)
trans <- as(split(codes_by_visit[,"VisitId"], codes_by_visit[,"Code"]), "transactions")
inspect(trans[1:5])
trans <- as(split(codes_by_visit[,"Code"], codes_by_visit[,"VisitId"]), "transactions")
inspect(trans[1:5])
rules <- apriori(trans)
inspect(rules[1:5])
