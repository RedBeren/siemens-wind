if(codes$VisitId[i] == names(clicks)[visit.ind]) {
append(clicks[visit.ind], codes$Code[i])
} else {
visit.ind <- visit.ind + 1
append(clicks[visit.ind], codes$Code[i])
}
}
clicks[1]
clicks[1]$`1000294`
names(clicks) <- 1:length(lvls)
clicks[1]
names(clicks) <- lvls
visit.ind <- 1
for (i in nrow(codes)) {
if(codes$VisitId[i] == names(clicks)[visit.ind]) {
visit.name <- codes$VisitId
append(clicks[[visit.ind]], codes$Code[i])
} else {
visit.ind <- visit.ind + 1
append(clicks[[visit.ind]], codes$Code[i])
}
}
clicks[[1]]
codes$VisitId[1]
visit.ind <- 1
for (i in nrow(sorted_codes)) {
if(sorted_codes$VisitId[i] == names(clicks)[visit.ind]) {
visit.name <- sorted_codes$VisitId
append(clicks[[visit.ind]], sorted_codes$Code[i])
} else {
visit.ind <- visit.ind + 1
append(clicks[[visit.ind]], sorted_codes$Code[i])
}
}
sorted_codes$VisitId[1]
names(clicks)[visit.ind]
visit.ind <- 1
names(clicks)[visit.ind]
sorted_codes$VisitId[1] == names(clicks)[visit.ind]
sorted_codes$Code[1]
clicks[[1]] <- 'a'
append(clicks[[1]], 'b')
clicks <- vector('list', length(lvls))
names(clicks) <- lvls
visit.ind <- 1
for (i in nrow(sorted_codes)) {
if(sorted_codes$VisitId[i] == names(clicks)[visit.ind]) {
clicks[[visit.ind]] <- append(clicks[[visit.ind]], sorted_codes$Code[i])
} else {
visit.ind <- visit.ind + 1
clicks[[visit.ind]] <- append(clicks[[visit.ind]], sorted_codes$Code[i])
}
}
sorted_codes$Code[1]
clicks <- vector('list', length(lvls))
names(clicks) <- lvls
visit.ind <- 1
i <- 1
if(sorted_codes$VisitId[i] == names(clicks)[visit.ind]) {
clicks[[visit.ind]] <- append(clicks[[visit.ind]], sorted_codes$Code[i])
} else {
visit.ind <- visit.ind + 1
clicks[[visit.ind]] <- append(clicks[[visit.ind]], sorted_codes$Code[i])
}
i <- 2
if(sorted_codes$VisitId[i] == names(clicks)[visit.ind]) {
clicks[[visit.ind]] <- append(clicks[[visit.ind]], sorted_codes$Code[i])
} else {
visit.ind <- visit.ind + 1
clicks[[visit.ind]] <- append(clicks[[visit.ind]], sorted_codes$Code[i])
}
i <- 3
if(sorted_codes$VisitId[i] == names(clicks)[visit.ind]) {
clicks[[visit.ind]] <- append(clicks[[visit.ind]], sorted_codes$Code[i])
} else {
visit.ind <- visit.ind + 1
clicks[[visit.ind]] <- append(clicks[[visit.ind]], sorted_codes$Code[i])
}
i <- 4
if(sorted_codes$VisitId[i] == names(clicks)[visit.ind]) {
clicks[[visit.ind]] <- append(clicks[[visit.ind]], sorted_codes$Code[i])
} else {
visit.ind <- visit.ind + 1
clicks[[visit.ind]] <- append(clicks[[visit.ind]], sorted_codes$Code[i])
}
i <- 5
if(sorted_codes$VisitId[i] == names(clicks)[visit.ind]) {
clicks[[visit.ind]] <- append(clicks[[visit.ind]], sorted_codes$Code[i])
} else {
visit.ind <- visit.ind + 1
clicks[[visit.ind]] <- append(clicks[[visit.ind]], sorted_codes$Code[i])
}
i <- 6
if(sorted_codes$VisitId[i] == names(clicks)[visit.ind]) {
clicks[[visit.ind]] <- append(clicks[[visit.ind]], sorted_codes$Code[i])
} else {
visit.ind <- visit.ind + 1
clicks[[visit.ind]] <- append(clicks[[visit.ind]], sorted_codes$Code[i])
}
nrow(sorted_codes)
clicks <- vector('list', length(lvls))
names(clicks) <- lvls
visit.ind <- 1
for (i in 1:nrow(sorted_codes)) {
if(sorted_codes$VisitId[i] == names(clicks)[visit.ind]) {
clicks[[visit.ind]] <- append(clicks[[visit.ind]], sorted_codes$Code[i])
} else {
visit.ind <- visit.ind + 1
clicks[[visit.ind]] <- append(clicks[[visit.ind]], sorted_codes$Code[i])
}
}
class(clicks) <- "Clickstreams"
clusters <- clusterClickstreams(clicks, order = 0, centers = 2)
library(clickstream)
clusters <- clusterClickstreams(clicks, order = 0, centers = 2)
print(clusters)
mc <- fitMarkovChain(clicks)
clusters <- clusterClickstreams(clicks, order = 0, centers = 3)
frequencyDF <- frequencies(clicks)
library(RCurl)
library(chron)
dat.url <- getURL('https://raw.githubusercontent.com/RedBeren/siemens-wind/master/Data/Data/All%20Sites%20Together%20encoded.csv')
dat <- read.csv(text = dat.url)
# Clean up dates
date.clean <- function(d) {
d <- as.character(d)
d <- sapply(d, function(x) paste(x, ":00", sep = ''))
dtparts <- t(as.data.frame(strsplit(d, ' ')))
row.names(dtparts) <- NULL
d <- chron(dates. = dtparts[,1], times. = dtparts[,2], format = c('m/d/y','h:m:s'))
return(d)
}
dat$VisitStartTime <- date.clean(dat$VisitStartTime)
dat$TimeOn <- date.clean(dat$TimeOn)
dat$TimeOff <- date.clean(dat$TimeOff)
# Park_Name is a little messed up
names(dat)[1] <- 'Park_Name'
# Discretize FactorA so it can be used in association analysis
dat$FactorA <- as.factor(dat$FactorA)
# StationID, VisitID, Code should be strings
dat$StationID <- as.character(dat$StationID)
dat$VisitId <- as.character(dat$VisitId)
dat$Code <- as.character(dat$Code)
library(RCurl)
library(chron)
dat.url <- getURL('https://raw.githubusercontent.com/RedBeren/siemens-wind/master/Data/Data/All%20Sites%20Together%20encoded.csv')
dat <- read.csv(text = dat.url)
# Clean up dates
date.clean <- function(d) {
d <- as.character(d)
d <- sapply(d, function(x) paste(x, ":00", sep = ''))
dtparts <- t(as.data.frame(strsplit(d, ' ')))
row.names(dtparts) <- NULL
d <- chron(dates. = dtparts[,1], times. = dtparts[,2], format = c('m/d/y','h:m:s'))
return(d)
}
dat$VisitStartTime <- date.clean(dat$VisitStartTime)
dat$TimeOn <- date.clean(dat$TimeOn)
dat$TimeOff <- date.clean(dat$TimeOff)
# Park_Name is a little messed up
names(dat)[1] <- 'Park_Name'
# Discretize FactorA so it can be used in association analysis
dat$FactorA <- as.factor(dat$FactorA)
# StationID, VisitID, Code should be strings
dat$StationID <- as.character(dat$StationID)
dat$VisitId <- as.character(dat$VisitId)
dat$Code <- as.character(dat$Code)
dat.url <- getURL('https://raw.githubusercontent.com/RedBeren/siemens-wind/master/Data/Data/All%20Sites%20Together%20encoded.csv')
dat <- read.csv(text = dat.url)
dat.url <- getURL('https://raw.githubusercontent.com/RedBeren/siemens-wind/master/Data/Data/All%20Sites%20Together%20encoded.csv')
dat.url <- getURL('https://raw.githubusercontent.com/RedBeren/siemens-wind/master/Data/Data/All%20Sites%20Together%20encoded.csv')
dat <- read.csv(text = dat.url)
date.clean <- function(d) {
d <- as.character(d)
d <- sapply(d, function(x) paste(x, ":00", sep = ''))
dtparts <- t(as.data.frame(strsplit(d, ' ')))
row.names(dtparts) <- NULL
d <- chron(dates. = dtparts[,1], times. = dtparts[,2], format = c('m/d/y','h:m:s'))
return(d)
}
dat$VisitStartTime <- date.clean(dat$VisitStartTime)
dat$TimeOn <- date.clean(dat$TimeOn)
dat$TimeOff <- date.clean(dat$TimeOff)
# Park_Name is a little messed up
names(dat)[1] <- 'Park_Name'
# Discretize FactorA so it can be used in association analysis
dat$FactorA <- as.factor(dat$FactorA)
# StationID, VisitID, Code should be strings
dat$StationID <- as.character(dat$StationID)
dat$VisitId <- as.character(dat$VisitId)
dat$Code <- as.character(dat$Code)
codes <- select(dat, one_of(c("VisitId","Code","TimeOn")))
attach(codes)
sorted_codes <- codes[order(VisitId, TimeOn),]
detach(codes)
lvls <- levels(factor(sorted_codes$VisitId))
clicks <- vector('list', length(lvls))
names(clicks) <- lvls
visit.ind <- 1
for (i in 1:nrow(sorted_codes)) {
if(sorted_codes$VisitId[i] == names(clicks)[visit.ind]) {
clicks[[visit.ind]] <- append(clicks[[visit.ind]], sorted_codes$Code[i])
} else {
visit.ind <- visit.ind + 1
clicks[[visit.ind]] <- append(clicks[[visit.ind]], sorted_codes$Code[i])
}
}
class(clicks) <- "Clickstreams"
require(dplyr)
codes <- select(dat, one_of(c("VisitId","Code","TimeOn")))
attach(codes)
sorted_codes <- codes[order(VisitId, TimeOn),]
detach(codes)
lvls <- levels(factor(sorted_codes$VisitId))
clicks <- vector('list', length(lvls))
names(clicks) <- lvls
visit.ind <- 1
for (i in 1:nrow(sorted_codes)) {
if(sorted_codes$VisitId[i] == names(clicks)[visit.ind]) {
clicks[[visit.ind]] <- append(clicks[[visit.ind]], sorted_codes$Code[i])
} else {
visit.ind <- visit.ind + 1
clicks[[visit.ind]] <- append(clicks[[visit.ind]], sorted_codes$Code[i])
}
}
class(clicks) <- "Clickstreams"
View(dat)
dat.url <- getURL('https://raw.githubusercontent.com/RedBeren/siemens-wind/master/Data/Data/Codes%20and%20Event%20Warning%20Stop%20classification.csv')
codes <- read.csv(text = dat.url)
names(codes)[1] <- 'Code'
names(codes)[3] <- 'IsManualStop'
codes$Code <- as.character(codes$Code)
codes %>% filter(EventWarningStop == 'Stop') -> stop_codes
codes %>% filter(EventWarningStop == 'Stop') %>%
filter(IsManualStop == FALSE) %>%
filter(StopUrgency == '6') -> abrupt_stop_codes
stop_urgency_tbl <- table(stop_codes$StopUrgency)
barplot(stop_urgency_tbl)
stop_urgency_tbl
dat <- left_join(dat, codes, by = 'Code')
View(dat)
dat$StopUrgency <- factor(dat$StopUrgency, labels = c('NoStop','Urgency1','Urgency2','Urgency3','Urgency4','Urgency5','Urgency6'))
all_codes <- select(dat, one_of(c("VisitId","Code","TimeOn","StopUrgency")))
attach(all_codes)
sorted_codes <- all_codes[order(VisitId, TimeOn),]
detach(all_codes)
lvls <- levels(factor(sorted_codes$VisitId))
clicks <- vector('list', length(lvls))
names(clicks) <- lvls
visit.ind <- 1
for (i in 1:nrow(sorted_codes)) {
if(sorted_codes$VisitId[i] == names(clicks)[visit.ind]) {
clicks[[visit.ind]] <- append(clicks[[visit.ind]], sorted_codes$Code[i])
} else {
clicks[[visit.ind]] <- append(clicks[[visit.ind]], sorted_codes$StopUrgency[i])
visit.ind <- visit.ind + 1
clicks[[visit.ind]] <- append(clicks[[visit.ind]], sorted_codes$Code[i])
}
}
class(clicks) <- "Clickstreams"
library(clickstream)
?absorbingStates
mc <- fitMarkovChain(clicks)
abs_states <- absorbingStates(mc)
frequencyDF <- frequencies(clicks)
summary(mc)
show(mc)
end_probs <- mc@end
end_probs
clusters <- clusterClickstreams(clicks, order = 0, centers = 2)
clusters$clusters[1]
mc1 <- fitMarkovChain(clusters$clusters[1])
mc2 <- fitMarkovChain(clusters$clusters[2])
show(mc1)
show(mc2)
mc
mc1
mc2
print(clicks)
plot(clicks)
summary(clusters)
install.packages("igraph")
install.packages("igraph")
install.packages("igraph")
install.packages("markovchain")
library(markovchain)
library(RCurl)
library(chron)
library(dplyr)
dat.url <- getURL('https://raw.githubusercontent.com/RedBeren/siemens-wind/master/Data/Data/All%20Sites%20Together%20encoded.csv')
dat <- read.csv(text = dat.url)
dat.url <- getURL('https://raw.githubusercontent.com/RedBeren/siemens-wind/master/Data/Data/Codes%20and%20Event%20Warning%20Stop%20classification.csv')
codes <- read.csv(text = dat.url)
# Clean up dates
date.clean <- function(d) {
d <- as.character(d)
d <- sapply(d, function(x) paste(x, ":00", sep = ''))
dtparts <- t(as.data.frame(strsplit(d, ' ')))
row.names(dtparts) <- NULL
d <- chron(dates. = dtparts[,1], times. = dtparts[,2], format = c('m/d/y','h:m:s'))
return(d)
}
dat$VisitStartTime <- date.clean(dat$VisitStartTime)
dat$TimeOn <- date.clean(dat$TimeOn)
dat$TimeOff <- date.clean(dat$TimeOff)
# Park_Name is a little messed up
names(dat)[1] <- 'Park_Name'
# Discretize FactorA so it can be used in association analysis
dat$FactorA <- as.factor(dat$FactorA)
# StationID, VisitID, Code should be strings
dat$StationID <- as.character(dat$StationID)
dat$VisitId <- as.character(dat$VisitId)
dat$Code <- as.character(dat$Code)
# Join code classification info onto full data set
dat <- left_join(dat, codes, by = 'Code')
# Recode stop urgency to make it a little clearer
dat$StopUrgency <- factor(dat$StopUrgency, labels = c('NoStop','Urgency1','Urgency2','Urgency3','Urgency4','Urgency5','Urgency6'))
codes$Code <- as.character(codes$Code)
codes$StopUrgency <- as.factor(codes$StopUrgency, labels = c('NoStop','Urgency1','Urgency2','Urgency3','Urgency4','Urgency5','Urgency6'))
codes$StopUrgency <- as.factor(codes$StopUrgency, labels = c('NoStop','Urgency1','Urgency2','Urgency3','Urgency4','Urgency5','Urgency6'))
codes$StopUrgency <- as.factor(as.character(codes$StopUrgency), labels = c('NoStop','Urgency1','Urgency2','Urgency3','Urgency4','Urgency5','Urgency6'))
codes$StopUrgency <- as.factor(as.character(codes$StopUrgency))
codes$StopUrgency <- as.factor(as.character(codes$StopUrgency), labels = c('NoStop','Urgency1','Urgency2','Urgency3','Urgency4','Urgency5','Urgency6'))
codes$StopUrgency <- as.factor(as.character(codes$StopUrgency), levels = c('NoStop','Urgency1','Urgency2','Urgency3','Urgency4','Urgency5','Urgency6'))
codes$StopUrgency <- as.factor(as.character(codes$StopUrgency),
levels = 1:7,
labels = c('NoStop','Urgency1','Urgency2','Urgency3','Urgency4','Urgency5','Urgency6'))
codes$StopUrgency <- as.factor(as.character(codes$StopUrgency),
levels = c(1:7),
labels = c('NoStop','Urgency1','Urgency2','Urgency3','Urgency4','Urgency5','Urgency6'))
a <- 1:7
as.character(a)
factor(as.character(a))
factor(as.character(a), labels = c('uno', 'dos', 'tres', 'cuatro', 'cinco', 'seis', 'siete'))
codes$StopUrgency <- as.factor(as.character(codes$StopUrgency),
levels = c(1:7),
labels = c('NoStop','Urgency1','Urgency2','Urgency3','Urgency4','Urgency5','Urgency6'))
codes$StopUrgency <- as.factor(as.character(codes$StopUrgency),
labels = c('NoStop','Urgency1','Urgency2','Urgency3','Urgency4','Urgency5','Urgency6'))
codes$StopUrgency <- as.factor(as.character(codes$StopUrgency),
levels = c('0','1','2','3','4','5','6'),
labels = c('NoStop','Urgency1','Urgency2','Urgency3','Urgency4','Urgency5','Urgency6'))
codes$StopUrgency <- as.character(codes$StopUrgency)
codes$StopUrgency <- as.factor(codes$StopUrgency,
levels = c('0','1','2','3','4','5','6'),
labels = c('NoStop','Urgency1','Urgency2','Urgency3','Urgency4','Urgency5','Urgency6'))
codes$StopUrgency <- as.factor(codes$StopUrgency)
codes$StopUrgency <- as.factor(codes$StopUrgency,
levels = c('0','1','2','3','4','5','6'),
labels = c('NoStop','Urgency1','Urgency2','Urgency3','Urgency4','Urgency5','Urgency6'))
codes <- read.csv(text = dat.url)
codes$Code <- as.character(codes$Code)
codes$StopUrgency <- factor(codes$StopUrgency, levels = c('NoStop','Urgency1','Urgency2','Urgency3','Urgency4','Urgency5','Urgency6'))
dat <- left_join(dat, codes, by = 'Code')
require(dplyr)
all_codes <- select(dat, one_of(c("VisitId","Code","TimeOn","StopUrgency")))
attach(all_codes)
sorted_codes <- all_codes[order(VisitId, TimeOn),]
detach(all_codes)
lvls <- levels(factor(sorted_codes$VisitId))
clicks <- vector('list', length(lvls))
names(clicks) <- lvls
visit.ind <- 1
for (i in 1:nrow(sorted_codes)) {
if(sorted_codes$VisitId[i] == names(clicks)[visit.ind]) {
clicks[[visit.ind]] <- append(clicks[[visit.ind]], sorted_codes$Code[i])
} else {
clicks[[visit.ind]] <- append(clicks[[visit.ind]], sorted_codes$StopUrgency[i])
visit.ind <- visit.ind + 1
clicks[[visit.ind]] <- append(clicks[[visit.ind]], sorted_codes$Code[i])
}
}
class(clicks) <- "Clickstreams"
library(clickstream)
library(markovchain)
#Markov Chain (takes forever)
mc <- fitMarkovChain(clicks)
show(mc)
end_probs <- mc@end
# Get the absorbing states
abs_states <- absorbingStates(mc)
View(sorted_codes)
View(dat)
codes <- read.csv(text = dat.url)
codes$Code <- as.character(codes$Code)
dat <- left_join(dat, codes, by = 'Code')
dat$StopUrgency <- as.factor(dat$StopUrgency)
dat <- select(dat, -EventWarningStop.x)
dat <- select(dat, -one_of(c('EventWarningStop.y','IsManualStop..x','StopUrgency.x','IsManualStop..y','StopUrgency.y')))
codes$StopUrgency <- factor(codes$StopUrgency, levels = c('NoStop','Urgency1','Urgency2','Urgency3','Urgency4','Urgency5','Urgency6'))
dat <- left_join(dat, codes, by = 'Code')
dat <- select(dat, -one_of(c('EventWarningStop','IsManualStop','StopUrgency')))
dat <- select(dat, -one_of(c('EventWarningStop','IsManualStop.','StopUrgency')))
codes <- read.csv(text = dat.url)
codes$Code <- as.character(codes$Code)
dat <- left_join(dat, codes, by = 'Code')
dat$StopUrgency <- factor(dat$StopUrgency, levels = c('NoStop','Urgency1','Urgency2','Urgency3','Urgency4','Urgency5','Urgency6'))
all_codes <- select(dat, one_of(c("VisitId","Code","TimeOn","StopUrgency")))
attach(all_codes)
sorted_codes <- all_codes[order(VisitId, TimeOn),]
detach(all_codes)
lvls <- levels(factor(sorted_codes$VisitId))
clicks <- vector('list', length(lvls))
names(clicks) <- lvls
visit.ind <- 1
for (i in 1:nrow(sorted_codes)) {
if(sorted_codes$VisitId[i] == names(clicks)[visit.ind]) {
clicks[[visit.ind]] <- append(clicks[[visit.ind]], sorted_codes$Code[i])
} else {
clicks[[visit.ind]] <- append(clicks[[visit.ind]], sorted_codes$StopUrgency[i])
visit.ind <- visit.ind + 1
clicks[[visit.ind]] <- append(clicks[[visit.ind]], sorted_codes$Code[i])
}
}
class(clicks) <- "Clickstreams"
dat <- select(dat, -one_of(c('EventWarningStop','IsManualStop.','StopUrgency')))
codes <- read.csv(text = dat.url)
codes$Code <- as.character(codes$Code)
dat <- left_join(dat, codes, by = 'Code')
dat$StopUrgency <- as.factor(dat$StopUrgency)
all_codes <- select(dat, one_of(c("VisitId","Code","TimeOn","StopUrgency")))
attach(all_codes)
sorted_codes <- all_codes[order(VisitId, TimeOn),]
detach(all_codes)
lvls <- levels(factor(sorted_codes$VisitId))
clicks <- vector('list', length(lvls))
names(clicks) <- lvls
visit.ind <- 1
for (i in 1:nrow(sorted_codes)) {
if(sorted_codes$VisitId[i] == names(clicks)[visit.ind]) {
clicks[[visit.ind]] <- append(clicks[[visit.ind]], sorted_codes$Code[i])
} else {
clicks[[visit.ind]] <- append(clicks[[visit.ind]], sorted_codes$StopUrgency[i])
visit.ind <- visit.ind + 1
clicks[[visit.ind]] <- append(clicks[[visit.ind]], sorted_codes$Code[i])
}
}
class(clicks) <- "Clickstreams"
library(clickstream)
library(markovchain)
#Markov Chain (takes forever)
mc <- fitMarkovChain(clicks)
show(mc)
end_probs <- mc@end
# Get the absorbing states
abs_states <- absorbingStates(mc)
plot(mc)
plot(mc, rescale = TRUE)
plot(mc, rescale = TRUE, asp=0)
plot(mc, rescale = F, asp=0)
l <- layout_with_fr(mc)
net <- graph_from_data_frame(mc@transitions$`1`)
l <- layout_with_fr(net)
plot(net, layout = l)
net <- simplify(net, remove.multiple = T, remove.loops = T)
l <- layout_with_fr(net)
plot(net, layout = l)
plot(net)
plot(mc)
net <- graph_from_adjacency_matrix(mc@transitions$`1`)
set.seed(999);mydata=matrix(runif(24),ncol=2)
rownames(mydata)=LETTERS[1:12]
g=graph.adjacency(cov(t(mydata)),weighted=TRUE)
plot(g)
g=delete.edges(g, which(E(g)$weight <=.1)) # here's my condition.
plot(g)
g=delete.vertices(g,which(degree(g)<1))
plot(g)
net <- as(mc, 'igraph')
library(igraph)
net <- as(mc, 'igraph')
mc_test<-new("markovchain", states=statesNames, transitionMatrix=
matrix(c(0.2,0.5,0.3,
0,1,0,
0.1,0.8,0.1),nrow=3, byrow=TRUE, dimnames=list(statesNames,statesNames)
))
library(markovchain)
statesNames=c("a","b","c")
mctest<-new("markovchain", states=statesNames, transitionMatrix=
matrix(c(0.2,0.5,0.3,
0,1,0,
0.1,0.8,0.1),nrow=3, byrow=TRUE, dimnames=list(statesNames,statesNames)
))
rm(mctest)
rm(net)
net <- graph_from_adjacency_matrix(mc@transitions$`1`, mode = 'directed', weighted = TRUE)
net <- graph_from_adjacency_matrix(as.matrix(mc@transitions$`1`), mode = 'directed', weighted = TRUE)
plot(net)
?E
net <- delete.edges(net, which(E(net)$weight <= 0.01))
plot(net)
net <- delete.vertices(net,which(degree(net)<1))
plot(net)
net <- delete.edges(net, which(E(net)$weight <= 0.05))
net <- delete.vertices(net,which(degree(net)<1))
plot(net)
net <- delete.edges(net, which(E(net)$weight <= 0.1))
net <- delete.vertices(net,which(degree(net)<1))
plot(net)
net <- delete.edges(net, which(E(net)$weight <= 0.3))
net <- delete.vertices(net,which(degree(net)<1))
plot(net)
net <- delete.edges(net, which(E(net)$weight <= 0.4))
net <- delete.vertices(net,which(degree(net)<1))
plot(net)
net <- delete.edges(net, which(E(net)$weight <= 0.5))
net <- delete.vertices(net,which(degree(net)<1))
plot(net)
net <- graph_from_adjacency_matrix(as.matrix(mc@transitions$`1`), mode = 'directed', weighted = TRUE)
net <- delete.edges(net, which(E(net)$weight <= 0.1))
net <- delete.vertices(net,which(degree(net)<1))
plot(net)
