library(chron)
dat <- read.csv('C:/Users/zackt/Documents/GitHub/siemens-wind/Data/Data/All Sites Together encoded.csv')
date.clean <- function(d) {
d <- as.character(d)
d <- sapply(d, function(x) paste(x, ":00", sep = ''))
dtparts <- t(as.data.frame(strsplit(d, ' ')))
row.names(dtparts) <- NULL
d <- chron(dates. = dtparts[,1], times. = dtparts[,2], format = c('m/d/y','h:m:s'))
return(d)
}
dat$VisitStartTime <- date.clean(dat$VisitStartTime)
dat$TimeOn <- date.clean(dat$TimeOn)
dat$TimeOff <- date.clean(dat$TimeOff)
codes <- read.csv('Codes and Event Warning Stop classification.csv')
codes <- read.csv('C:/Users/zackt/Documents/GitHub/siemens-wind/Data/Data/Codes and Event Warning Stop classification.csv')
names(dat)[1]
names(dat)[1] <- 'Park_Name'
names(codes)[1] <- 'Code'
codes$Code <- as.character(codes$Code)
table(codes$EventWarningStop)
library(dplyr)
table(codes$StopUrgency)
names(codes)[3] <- 'IsManualStop'
codes %>% filter(EventWarningStop == 'Stop') %>%
filter(IsManualStop == FALSE) %>%
filter(StopUrgency == '6') -> abrupt_stop_codes
abrupt_stop_codes
codes %>% filter(EventWarningStop == 'Stop') -> stop_codes
stop_codes
table(stop_codes$StopUrgency)
stop_urgency_tbl <- table(stop_codes$StopUrgency)
hist(stop_codes$StopUrgency)
hist(as.numeric(stop_codes$StopUrgency))
hist(as.numeric(stop_codes$StopUrgency), binwidth = 1)
hist(as.numeric(stop_codes$StopUrgency), breaks = 6)
hist(as.numeric(stop_codes$StopUrgency), breaks = 5)
barplot(stop_urgency_tbl)
library(arules)
?version
R.version
table(dat$FactorA)
a <- as.factor(dat$FactorA)
a
levels(a)
dat$FactorA <- as.factor(dat$FactorA)
dat$StationID <- as.character(dat$StationID)
dat$VisitId <- as.character(dat$VisitId)
dat$Code <- as.character(dat$Code)
nrow(dat)
nrow(complete.cases(dat))
table(dat$Park_Name)
table(dat$FactorA)
table(dat$FactorB)
table(dat$FactorC)
table(dat$FactorD)
table(dat$StationID)
?complete.cases
install.packages("RCurl")
library(RCurl)
library(chron)
dat.url <- getURL('https://raw.githubusercontent.com/RedBeren/siemens-wind/master/Data/Data/All%20Sites%20Together%20encoded.csv')
dat <- read.csv(text = dat.url)
library(RCurl)
library(chron)
dat.url <- getURL('https://raw.githubusercontent.com/RedBeren/siemens-wind/master/Data/Data/All%20Sites%20Together%20encoded.csv')
dat <- read.csv(text = dat.url)
# Clean up dates
date.clean <- function(d) {
d <- as.character(d)
d <- sapply(d, function(x) paste(x, ":00", sep = ''))
dtparts <- t(as.data.frame(strsplit(d, ' ')))
row.names(dtparts) <- NULL
d <- chron(dates. = dtparts[,1], times. = dtparts[,2], format = c('m/d/y','h:m:s'))
return(d)
}
dat$VisitStartTime <- date.clean(dat$VisitStartTime)
dat$TimeOn <- date.clean(dat$TimeOn)
dat$TimeOff <- date.clean(dat$TimeOff)
# Park_Name is a little messed up
names(dat)[1] <- 'Park_Name'
# Discretize FactorA so it can be used in association analysis
dat$FactorA <- as.factor(dat$FactorA)
# StationID, VisitID, Code should be strings
dat$StationID <- as.character(dat$StationID)
dat$VisitId <- as.character(dat$VisitId)
dat$Code <- as.character(dat$Code)
install.packages("clickstream")
View(dat)
codes_by_visit <- select(dat, one_of(c("VisitId","Code")))
require(dplyr)
codes_by_visit <- select(dat, one_of(c("VisitId","Code")))
codes_by_visit <- spread(codes_by_visit, VisitId, Code)
require(tidyr)
codes_by_visit <- spread(codes_by_visit, VisitId, Code)
dat %>% spread(VisitId, Code) -> codes_by_visit
dat %>% select(one_of(c("VisitId","Code"))) %>% arrange(VisitId) -> codes_by_visit
View(codes_by_visit)
codes_by_visit %>% spread(VisitId, Code) -> codes_by_visit
require(reshape2)
dcast(melt(dat, id = "VisitId"), VisitId ~ Code)
dcast(melt(dat), VisitId ~ Code)
dfmelt <- melt(codes_by_visit, id = "VisitId")
dfcast <- dcast(dfmelt, VisitId ~ variable + value)
View(dfcast)
View(dfcast)
dat %>% select(one_of(c("VisitId","Code"))) -> codes_by_visit
View(codes_by_visit)
trans <- as(codes_by_visit, "transactions")
library(arules)
trans <- as(codes_by_visit, "transactions")
rm(dfmelt)
rm(dfcast)
codes_by_visit$VisitId <- factor(codes_by_visit$VisitId)
codes_by_visit$Code <- factor(codes_by_visit$Code)
trans <- as(codes_by_visit, "transactions")
rules <- apriori(trans)
inspect(head(rules))
inspect(rules)
inspect(rules[1:5])
?apriori
rules <- apriori(codes_by_visit)
inspect(rules)
View(codes_by_visit)
trans <- as(split(codes_by_visit[,"VisitId"], codes_by_visit[,"Code"]), "transactions")
inspect(trans[1:5])
trans <- as(split(codes_by_visit[,"Code"], codes_by_visit[,"VisitId"]), "transactions")
inspect(trans[1:5])
rules <- apriori(trans)
inspect(rules[1:5])
library(RCurl)
library(chron)
dat.url <- getURL('https://raw.githubusercontent.com/RedBeren/siemens-wind/master/Data/Data/All%20Sites%20Together%20encoded.csv')
dat <- read.csv(text = dat.url)
# Clean up dates
date.clean <- function(d) {
d <- as.character(d)
d <- sapply(d, function(x) paste(x, ":00", sep = ''))
dtparts <- t(as.data.frame(strsplit(d, ' ')))
row.names(dtparts) <- NULL
d <- chron(dates. = dtparts[,1], times. = dtparts[,2], format = c('m/d/y','h:m:s'))
return(d)
}
dat$VisitStartTime <- date.clean(dat$VisitStartTime)
dat$TimeOn <- date.clean(dat$TimeOn)
dat$TimeOff <- date.clean(dat$TimeOff)
# Park_Name is a little messed up
names(dat)[1] <- 'Park_Name'
# Discretize FactorA so it can be used in association analysis
dat$FactorA <- as.factor(dat$FactorA)
# StationID, VisitID, Code should be strings
dat$StationID <- as.character(dat$StationID)
dat$VisitId <- as.character(dat$VisitId)
dat$Code <- as.character(dat$Code)
# Run data_cleaning.R first
library(arules)
require(dplyr)
dat %>% select(one_of(c("VisitId","Code"))) -> codes_by_visit
codes_by_visit$VisitId <- factor(codes_by_visit$VisitId)
codes_by_visit$Code <- factor(codes_by_visit$Code)
View(codes_by_visit)
nlevels(codes_by_visit$VisitId)
click_list <- vector("list", nlevels(codes_by_visit$VisitId))
length(click_list)
test_lists <- vector('list', 5)
test_lists[1] <- 'a'
names(test_lists[1]) <- 'aname'
test_lists
rm(click_list)
rm(test_lists)
nmiss(dat$VisitStartTime)
sum(is.na(dat$VisitStartTime))
codes <- select(dat, one_of(c("VisitId","Code","VisitStartTime")))
rm(codes_by_visit)
a <- factor(codes$Code)
nlevels(a)
dat %>% select(one_of(c("VisitId","Code"))) -> codes_by_visit
codes_by_visit$VisitId <- factor(codes_by_visit$VisitId)
codes_by_visit$Code <- factor(codes_by_visit$Code)
View(codes)
codes <- select(dat, one_of(c("VisitId","Code","VisitStartTime", "TimeOn")))
View(codes)
codes <- select(dat, one_of(c("VisitId","Code","TimeOn")))
attach(codes)
sorted_codes <- codes[order(VisitId, TimeOn),]
detach(codes)
View(sorted_codes)
lvls <- levels(factor(sorted_codes$VisitId))
View(sorted_codes)
clicks <- vector('list', lvls)
clicks <- vector('list', length(lvls))
names(clicks) <- lvls
clicks[2]
names(clicks)[2]
visit.ind <- 1
for (i in nrow(codes)) {
if(codes$VisitId[i] == names(clicks)[visit.ind]) {
append(clicks[visit.ind], codes$Code[i])
} else {
visit.ind <- visit.ind + 1
append(clicks[visit.ind], codes$Code[i])
}
}
clicks[1]
clicks[1]$`1000294`
names(clicks) <- 1:length(lvls)
clicks[1]
names(clicks) <- lvls
visit.ind <- 1
for (i in nrow(codes)) {
if(codes$VisitId[i] == names(clicks)[visit.ind]) {
visit.name <- codes$VisitId
append(clicks[[visit.ind]], codes$Code[i])
} else {
visit.ind <- visit.ind + 1
append(clicks[[visit.ind]], codes$Code[i])
}
}
clicks[[1]]
codes$VisitId[1]
visit.ind <- 1
for (i in nrow(sorted_codes)) {
if(sorted_codes$VisitId[i] == names(clicks)[visit.ind]) {
visit.name <- sorted_codes$VisitId
append(clicks[[visit.ind]], sorted_codes$Code[i])
} else {
visit.ind <- visit.ind + 1
append(clicks[[visit.ind]], sorted_codes$Code[i])
}
}
sorted_codes$VisitId[1]
names(clicks)[visit.ind]
visit.ind <- 1
names(clicks)[visit.ind]
sorted_codes$VisitId[1] == names(clicks)[visit.ind]
sorted_codes$Code[1]
clicks[[1]] <- 'a'
append(clicks[[1]], 'b')
clicks <- vector('list', length(lvls))
names(clicks) <- lvls
visit.ind <- 1
for (i in nrow(sorted_codes)) {
if(sorted_codes$VisitId[i] == names(clicks)[visit.ind]) {
clicks[[visit.ind]] <- append(clicks[[visit.ind]], sorted_codes$Code[i])
} else {
visit.ind <- visit.ind + 1
clicks[[visit.ind]] <- append(clicks[[visit.ind]], sorted_codes$Code[i])
}
}
sorted_codes$Code[1]
clicks <- vector('list', length(lvls))
names(clicks) <- lvls
visit.ind <- 1
i <- 1
if(sorted_codes$VisitId[i] == names(clicks)[visit.ind]) {
clicks[[visit.ind]] <- append(clicks[[visit.ind]], sorted_codes$Code[i])
} else {
visit.ind <- visit.ind + 1
clicks[[visit.ind]] <- append(clicks[[visit.ind]], sorted_codes$Code[i])
}
i <- 2
if(sorted_codes$VisitId[i] == names(clicks)[visit.ind]) {
clicks[[visit.ind]] <- append(clicks[[visit.ind]], sorted_codes$Code[i])
} else {
visit.ind <- visit.ind + 1
clicks[[visit.ind]] <- append(clicks[[visit.ind]], sorted_codes$Code[i])
}
i <- 3
if(sorted_codes$VisitId[i] == names(clicks)[visit.ind]) {
clicks[[visit.ind]] <- append(clicks[[visit.ind]], sorted_codes$Code[i])
} else {
visit.ind <- visit.ind + 1
clicks[[visit.ind]] <- append(clicks[[visit.ind]], sorted_codes$Code[i])
}
i <- 4
if(sorted_codes$VisitId[i] == names(clicks)[visit.ind]) {
clicks[[visit.ind]] <- append(clicks[[visit.ind]], sorted_codes$Code[i])
} else {
visit.ind <- visit.ind + 1
clicks[[visit.ind]] <- append(clicks[[visit.ind]], sorted_codes$Code[i])
}
i <- 5
if(sorted_codes$VisitId[i] == names(clicks)[visit.ind]) {
clicks[[visit.ind]] <- append(clicks[[visit.ind]], sorted_codes$Code[i])
} else {
visit.ind <- visit.ind + 1
clicks[[visit.ind]] <- append(clicks[[visit.ind]], sorted_codes$Code[i])
}
i <- 6
if(sorted_codes$VisitId[i] == names(clicks)[visit.ind]) {
clicks[[visit.ind]] <- append(clicks[[visit.ind]], sorted_codes$Code[i])
} else {
visit.ind <- visit.ind + 1
clicks[[visit.ind]] <- append(clicks[[visit.ind]], sorted_codes$Code[i])
}
nrow(sorted_codes)
clicks <- vector('list', length(lvls))
names(clicks) <- lvls
visit.ind <- 1
for (i in 1:nrow(sorted_codes)) {
if(sorted_codes$VisitId[i] == names(clicks)[visit.ind]) {
clicks[[visit.ind]] <- append(clicks[[visit.ind]], sorted_codes$Code[i])
} else {
visit.ind <- visit.ind + 1
clicks[[visit.ind]] <- append(clicks[[visit.ind]], sorted_codes$Code[i])
}
}
class(clicks) <- "Clickstreams"
clusters <- clusterClickstreams(clicks, order = 0, centers = 2)
library(clickstream)
clusters <- clusterClickstreams(clicks, order = 0, centers = 2)
print(clusters)
mc <- fitMarkovChain(clicks)
clusters <- clusterClickstreams(clicks, order = 0, centers = 3)
frequencyDF <- frequencies(clicks)
library(RCurl)
library(chron)
dat.url <- getURL('https://raw.githubusercontent.com/RedBeren/siemens-wind/master/Data/Data/All%20Sites%20Together%20encoded.csv')
dat <- read.csv(text = dat.url)
# Clean up dates
date.clean <- function(d) {
d <- as.character(d)
d <- sapply(d, function(x) paste(x, ":00", sep = ''))
dtparts <- t(as.data.frame(strsplit(d, ' ')))
row.names(dtparts) <- NULL
d <- chron(dates. = dtparts[,1], times. = dtparts[,2], format = c('m/d/y','h:m:s'))
return(d)
}
dat$VisitStartTime <- date.clean(dat$VisitStartTime)
dat$TimeOn <- date.clean(dat$TimeOn)
dat$TimeOff <- date.clean(dat$TimeOff)
# Park_Name is a little messed up
names(dat)[1] <- 'Park_Name'
# Discretize FactorA so it can be used in association analysis
dat$FactorA <- as.factor(dat$FactorA)
# StationID, VisitID, Code should be strings
dat$StationID <- as.character(dat$StationID)
dat$VisitId <- as.character(dat$VisitId)
dat$Code <- as.character(dat$Code)
library(RCurl)
library(chron)
dat.url <- getURL('https://raw.githubusercontent.com/RedBeren/siemens-wind/master/Data/Data/All%20Sites%20Together%20encoded.csv')
dat <- read.csv(text = dat.url)
# Clean up dates
date.clean <- function(d) {
d <- as.character(d)
d <- sapply(d, function(x) paste(x, ":00", sep = ''))
dtparts <- t(as.data.frame(strsplit(d, ' ')))
row.names(dtparts) <- NULL
d <- chron(dates. = dtparts[,1], times. = dtparts[,2], format = c('m/d/y','h:m:s'))
return(d)
}
dat$VisitStartTime <- date.clean(dat$VisitStartTime)
dat$TimeOn <- date.clean(dat$TimeOn)
dat$TimeOff <- date.clean(dat$TimeOff)
# Park_Name is a little messed up
names(dat)[1] <- 'Park_Name'
# Discretize FactorA so it can be used in association analysis
dat$FactorA <- as.factor(dat$FactorA)
# StationID, VisitID, Code should be strings
dat$StationID <- as.character(dat$StationID)
dat$VisitId <- as.character(dat$VisitId)
dat$Code <- as.character(dat$Code)
dat.url <- getURL('https://raw.githubusercontent.com/RedBeren/siemens-wind/master/Data/Data/All%20Sites%20Together%20encoded.csv')
dat <- read.csv(text = dat.url)
dat.url <- getURL('https://raw.githubusercontent.com/RedBeren/siemens-wind/master/Data/Data/All%20Sites%20Together%20encoded.csv')
dat.url <- getURL('https://raw.githubusercontent.com/RedBeren/siemens-wind/master/Data/Data/All%20Sites%20Together%20encoded.csv')
dat <- read.csv(text = dat.url)
date.clean <- function(d) {
d <- as.character(d)
d <- sapply(d, function(x) paste(x, ":00", sep = ''))
dtparts <- t(as.data.frame(strsplit(d, ' ')))
row.names(dtparts) <- NULL
d <- chron(dates. = dtparts[,1], times. = dtparts[,2], format = c('m/d/y','h:m:s'))
return(d)
}
dat$VisitStartTime <- date.clean(dat$VisitStartTime)
dat$TimeOn <- date.clean(dat$TimeOn)
dat$TimeOff <- date.clean(dat$TimeOff)
# Park_Name is a little messed up
names(dat)[1] <- 'Park_Name'
# Discretize FactorA so it can be used in association analysis
dat$FactorA <- as.factor(dat$FactorA)
# StationID, VisitID, Code should be strings
dat$StationID <- as.character(dat$StationID)
dat$VisitId <- as.character(dat$VisitId)
dat$Code <- as.character(dat$Code)
codes <- select(dat, one_of(c("VisitId","Code","TimeOn")))
attach(codes)
sorted_codes <- codes[order(VisitId, TimeOn),]
detach(codes)
lvls <- levels(factor(sorted_codes$VisitId))
clicks <- vector('list', length(lvls))
names(clicks) <- lvls
visit.ind <- 1
for (i in 1:nrow(sorted_codes)) {
if(sorted_codes$VisitId[i] == names(clicks)[visit.ind]) {
clicks[[visit.ind]] <- append(clicks[[visit.ind]], sorted_codes$Code[i])
} else {
visit.ind <- visit.ind + 1
clicks[[visit.ind]] <- append(clicks[[visit.ind]], sorted_codes$Code[i])
}
}
class(clicks) <- "Clickstreams"
require(dplyr)
codes <- select(dat, one_of(c("VisitId","Code","TimeOn")))
attach(codes)
sorted_codes <- codes[order(VisitId, TimeOn),]
detach(codes)
lvls <- levels(factor(sorted_codes$VisitId))
clicks <- vector('list', length(lvls))
names(clicks) <- lvls
visit.ind <- 1
for (i in 1:nrow(sorted_codes)) {
if(sorted_codes$VisitId[i] == names(clicks)[visit.ind]) {
clicks[[visit.ind]] <- append(clicks[[visit.ind]], sorted_codes$Code[i])
} else {
visit.ind <- visit.ind + 1
clicks[[visit.ind]] <- append(clicks[[visit.ind]], sorted_codes$Code[i])
}
}
class(clicks) <- "Clickstreams"
View(dat)
dat.url <- getURL('https://raw.githubusercontent.com/RedBeren/siemens-wind/master/Data/Data/Codes%20and%20Event%20Warning%20Stop%20classification.csv')
codes <- read.csv(text = dat.url)
names(codes)[1] <- 'Code'
names(codes)[3] <- 'IsManualStop'
codes$Code <- as.character(codes$Code)
codes %>% filter(EventWarningStop == 'Stop') -> stop_codes
codes %>% filter(EventWarningStop == 'Stop') %>%
filter(IsManualStop == FALSE) %>%
filter(StopUrgency == '6') -> abrupt_stop_codes
stop_urgency_tbl <- table(stop_codes$StopUrgency)
barplot(stop_urgency_tbl)
stop_urgency_tbl
dat <- left_join(dat, codes, by = 'Code')
View(dat)
dat$StopUrgency <- factor(dat$StopUrgency, labels = c('NoStop','Urgency1','Urgency2','Urgency3','Urgency4','Urgency5','Urgency6'))
all_codes <- select(dat, one_of(c("VisitId","Code","TimeOn","StopUrgency")))
attach(all_codes)
sorted_codes <- all_codes[order(VisitId, TimeOn),]
detach(all_codes)
lvls <- levels(factor(sorted_codes$VisitId))
clicks <- vector('list', length(lvls))
names(clicks) <- lvls
visit.ind <- 1
for (i in 1:nrow(sorted_codes)) {
if(sorted_codes$VisitId[i] == names(clicks)[visit.ind]) {
clicks[[visit.ind]] <- append(clicks[[visit.ind]], sorted_codes$Code[i])
} else {
clicks[[visit.ind]] <- append(clicks[[visit.ind]], sorted_codes$StopUrgency[i])
visit.ind <- visit.ind + 1
clicks[[visit.ind]] <- append(clicks[[visit.ind]], sorted_codes$Code[i])
}
}
class(clicks) <- "Clickstreams"
library(clickstream)
?absorbingStates
mc <- fitMarkovChain(clicks)
abs_states <- absorbingStates(mc)
frequencyDF <- frequencies(clicks)
summary(mc)
show(mc)
end_probs <- mc@end
end_probs
clusters <- clusterClickstreams(clicks, order = 0, centers = 2)
clusters$clusters[1]
mc1 <- fitMarkovChain(clusters$clusters[1])
mc2 <- fitMarkovChain(clusters$clusters[2])
show(mc1)
show(mc2)
mc
mc1
mc2
print(clicks)
plot(clicks)
summary(clusters)
install.packages("igraph")
install.packages("igraph")
install.packages("igraph")
