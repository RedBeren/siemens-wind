{
    "collab_server" : "",
    "contents" : "library(clickstream)\nlibrary(igraph)\nlibrary(forcats)\n\n#Markov Chain (takes forever)\nmc <- clickstream::fitMarkovChain(clicks)\nshow(mc)\nend_probs <- mc@end\n\n# Get the absorbing states\nabs_states <- absorbingStates(mc)\n\n#Markov Chain for visit duration (also takes forever)\nmc_dur <- clickstream::fitMarkovChain(clicks_visitduration)\nshow(mc_dur)\nend_probs_dur <- mc_dur@end\n\n# Get the absorbing states\nabs_states_dur <- absorbingStates(mc_dur)\n\n# Use igraph package to plot chain\nnet <- graph_from_adjacency_matrix(as.matrix(mc@transitions$`1`), mode = 'directed', weighted = TRUE)\nnet <- delete.edges(net, which(E(net)$weight <= 0.4))\nnet <- delete.vertices(net,which(degree(net)<1))\nnet <- simplify(net, remove.loops = T)\nE(net)$arrow.size <- 0.2\ndeg <- degree(net, mode = 'all')\ncolrs <- ifelse(deg > 3, 'red','blue')\nplot(net, vertex.shape = 'none',\n     vertex.label.color = colrs)\n\n# Two main absorbing states, so try splitting into two clusters\nclusters <- clusterClickstreams(clicks, order = 0, centers = 2)\nsummary(clusters)\n\n# Build Markov Chain off each cluster and check absorbing states\nmc1 <- fitMarkovChain(clusters$clusters[1])\nmc2 <- fitMarkovChain(clusters$clusters[2])\nshow(mc1) # Code 10105 Stop Urgency5\nshow(mc2) # Code 14001 Warning NoStop\n\n#Frequencies\nfrequencyDF <- frequencies(clicks)\n\n# Take first few codes from a visit and try using markov chain to predict rest of it\n# Also try clustering them\nclick_test <- clicks$`100312`\nclick_test.fragment <- new('Pattern', sequence = click_test[1:5])\nclick_test.pred <- predict(mc, click_test.fragment, dist = 3)\npredict(clusters, click_test.fragment)\n\n\nclick_test2 <- clicks$`1000863`\nclick_test2.fragment <- new('Pattern', sequence = click_test2[1:6])\nclick_test2.pred <- predict(mc, click_test2.fragment, dist = 1)\npredict(clusters, click_test2.fragment)\n\n# Now try to figure out clustering performance\nend_states <- sapply(clicks, function(x) tail(x,1))\nend_states <- factor(end_states)\nend_states <- fct_collapse(end_states, Stop = c('8000','Stop1','Stop2','Stop3','Stop4','Stop5'))\nstart_patterns <- lapply(clicks, function(x) head(x,-1))\nclus_patterns <- lapply(start_patterns, function(x) {\n  new('Pattern', sequence = x)\n})\nclus_predictions <- sapply(clus_patterns, function(x) predict(clusters,x))\nlength(clus_predictions)\npred_vec <- unlist(unname(clus_predictions), recursive = TRUE)\nlength(pred_vec)\npred_vec <- factor(pred_vec, labels = c('Stop',\"NoStop\"))\n",
    "created" : 1488748784494.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "460064790",
    "id" : "8262A40C",
    "lastKnownWriteTime" : 1489308877,
    "last_content_update" : 1489308877337,
    "path" : "~/GitHub/siemens-wind/clickstream.R",
    "project_path" : "clickstream.R",
    "properties" : {
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}